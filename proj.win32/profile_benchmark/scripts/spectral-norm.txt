
[FILE] scripts\spectral-norm.os
[1] var start_time = getTimeSec()

begin function
  begin locals 20, stack 27
    0 _F (param)
    1 this (param)
    2 _E
    3 _G
    4 start_time
    5 A
    6 Av
    7 Atv
    8 AtAv
    9 N
    10 u
    11 v
    12 t
    15 vBv
    16 vv
  end locals
  begin call method
    move: # (20) = var _E (2)
    move: # (21) = const string "getTimeSec" (-9)
  end call method: start 20, params 2, ret values 1
  move: var start_time (4) = # (20)


[3] var function A(i, j){

  begin function
    begin locals 7, stack 11
      0 _F (param)
      1 this (param)
      2 i (param)
      3 j (param)
      4 _E
      5 _G
      6 ij
    end locals

[4] var ij = i+j-1

    # (7) = param i (2) [operator +] param j (3)
    var ij (6) = # (7) [operator -] const number 1 (-4)


[5] return 1.0 / (ij * (ij-1) * 0.5 + i)

      # (9) = var ij (6) [operator -] const number 1 (-4)
      # (8) = var ij (6) [operator *] # (9)
      # (8) = # (8) [operator *] const number 0.5 (-5)
      # (8) = # (8) [operator +] param i (2)
      # (7) = const number 1 (-4) [operator /] # (8)
    return: # (7), count 1
  end function: var A (5), index 1


[8] var function Av(x, y, N){

  begin function
    begin locals 10, stack 16
      0 _F (param)
      1 this (param)
      2 x (param)
      3 y (param)
      4 N (param)
      5 _E
      6 _G
    end locals

[9] for(var i=1; i <= N; i++){

    begin scope
      begin locals 1
        7 i
      end locals
      move: var i (7) = const number 1 (-4)

      begin loop
        begin if
          begin bool exp
            move: # (10) = var i (7)
            move: # (11) = param N (4)
            # (10) = # (10) [logic <=] # (11)
            # (10) = [logic not] # (10)
          end bool exp
          begin then
            break
          end then
        end if ret values 0


[10] var a = 0

        begin scope
          begin locals 1
            8 a
          end locals
          move: var a (8) = const number 0 (-6)


[11] for(var j=1; j <= N; j++){ a = a + x[j] * A(i, j) }

          begin scope
            begin locals 1
              9 j
            end locals
            move: var j (9) = const number 1 (-4)

            begin loop
              begin if
                begin bool exp
                  move: # (10) = var j (9)
                  move: # (11) = param N (4)
                  # (10) = # (10) [logic <=] # (11)
                  # (10) = [logic not] # (10)
                end bool exp
                begin then
                  break
                end then
              end if ret values 0

              begin scope
                get property: # (11) = param x (2) [var j (9)]
                begin call
                  get upvalue: # (12) = var A (5 1)
                  move: # (13) = const null (-1)
                  move: # (14) = var i (7)
                  move: # (15) = var j (9)
                end call: start 12, params 4, ret values 1
                # (11) = # (11) [operator *] # (12)
                var a (8) = var a (8) [operator +] # (11)
              end scope ret values 0

              var j (9) = var j (9) [operator +] const number 1 (-4)
            end loop ret values 0
          end scope ret values 0


[12] y[i] = a

          set property: param y (3) [var i (7)] = var a (8)
        end scope ret values 0


[9] for(var i=1; i <= N; i++){

        var i (7) = var i (7) [operator +] const number 1 (-4)
      end loop ret values 0
    end scope ret values 0
  end function: var Av (6), index 2


[16] var function Atv(x, y, N){

  begin function
    begin locals 10, stack 16
      0 _F (param)
      1 this (param)
      2 x (param)
      3 y (param)
      4 N (param)
      5 _E
      6 _G
    end locals

[17] for(var i=1; i<=N; i++){

    begin scope
      begin locals 1
        7 i
      end locals
      move: var i (7) = const number 1 (-4)

      begin loop
        begin if
          begin bool exp
            move: # (10) = var i (7)
            move: # (11) = param N (4)
            # (10) = # (10) [logic <=] # (11)
            # (10) = [logic not] # (10)
          end bool exp
          begin then
            break
          end then
        end if ret values 0


[18] var a = 0

        begin scope
          begin locals 1
            8 a
          end locals
          move: var a (8) = const number 0 (-6)


[19] for(var j=1; j<=N; j++){ a = a + x[j] * A(j, i) }

          begin scope
            begin locals 1
              9 j
            end locals
            move: var j (9) = const number 1 (-4)

            begin loop
              begin if
                begin bool exp
                  move: # (10) = var j (9)
                  move: # (11) = param N (4)
                  # (10) = # (10) [logic <=] # (11)
                  # (10) = [logic not] # (10)
                end bool exp
                begin then
                  break
                end then
              end if ret values 0

              begin scope
                get property: # (11) = param x (2) [var j (9)]
                begin call
                  get upvalue: # (12) = var A (5 1)
                  move: # (13) = const null (-1)
                  move: # (14) = var j (9)
                  move: # (15) = var i (7)
                end call: start 12, params 4, ret values 1
                # (11) = # (11) [operator *] # (12)
                var a (8) = var a (8) [operator +] # (11)
              end scope ret values 0

              var j (9) = var j (9) [operator +] const number 1 (-4)
            end loop ret values 0
          end scope ret values 0


[20] y[i] = a

          set property: param y (3) [var i (7)] = var a (8)
        end scope ret values 0


[17] for(var i=1; i<=N; i++){

        var i (7) = var i (7) [operator +] const number 1 (-4)
      end loop ret values 0
    end scope ret values 0
  end function: var Atv (7), index 3


[24] var function AtAv(x, y, t, N){

  begin function
    begin locals 8, stack 13
      0 _F (param)
      1 this (param)
      2 x (param)
      3 y (param)
      4 t (param)
      5 N (param)
      6 _E
      7 _G
    end locals

[25] Av(x, t, N)

    begin call
      get upvalue: # (8) = var Av (6 1)
      move: # (9) = const null (-1)
      move: # (10) = param x (2)
      move: # (11) = param t (4)
      move: # (12) = param N (5)
    end call: start 8, params 5, ret values 0


[26] Atv(t, y, N)

      begin call
        get upvalue: # (8) = var Atv (7 1)
        move: # (9) = const null (-1)
        move: # (10) = param t (4)
        move: # (11) = param y (3)
        move: # (12) = param N (5)
      end call: start 8, params 5, ret values 1
    return: # (8), count 1
  end function: var AtAv (8), index 4


[29] var N = numberOf(arg && arg[1]) || 100

  begin call method
    move: # (20) = var _E (2)
    move: # (21) = const string "numberOf" (-10)
    get property: # (22) = var _E (2) [const string "arg" (-11)]
    logic &&: # (22)
      get property: # (22) = var _E (2) [const string "arg" (-11)]
      get property: # (22) = # (22) [const number 1 (-4)]
  end call method: start 20, params 3, ret values 1
  logic ||: # (20)
    move: # (20) = const number 100 (-7)
  move: var N (9) = # (20)


[30] var u, v, t = {}, {}, {}

  new object 0: # (20)
  new object 0: # (21)
  new object 0: # (22)
  move: var t (12) = # (22)
  move: var v (11) = # (21)
  move: var u (10) = # (20)


[31] for(var i=1; i<=N; i++){ u[i] = 1 }

  begin scope
    begin locals 1
      13 i
    end locals
    move: var i (13) = const number 1 (-4)

    begin loop
      begin if
        begin bool exp
          move: # (20) = var i (13)
          move: # (21) = var N (9)
          # (20) = # (20) [logic <=] # (21)
          # (20) = [logic not] # (20)
        end bool exp
        begin then
          break
        end then
      end if ret values 0

      begin scope
        set property: var u (10) [var i (13)] = const number 1 (-4)
      end scope ret values 0

      var i (13) = var i (13) [operator +] const number 1 (-4)
    end loop ret values 0
  end scope ret values 0


[33] for(var i=1; i<=10; i++){ AtAv(u, v, t, N) AtAv(v, u, t, N) }

  begin scope
    begin locals 1
      14 i
    end locals
    move: var i (14) = const number 1 (-4)

    begin loop
      begin if
        begin bool exp
          move: # (20) = var i (14)
          move: # (21) = const number 10 (-8)
          # (20) = # (20) [logic <=] # (21)
          # (20) = [logic not] # (20)
        end bool exp
        begin then
          break
        end then
      end if ret values 0

      begin scope
        begin call
          move: # (20) = var AtAv (8)
          move: # (21) = const null (-1)
          move: # (22) = var u (10)
          move: # (23) = var v (11)
          move: # (24) = var t (12)
          move: # (25) = var N (9)
        end call: start 20, params 6, ret values 0

        begin call
          move: # (20) = var AtAv (8)
          move: # (21) = const null (-1)
          move: # (22) = var v (11)
          move: # (23) = var u (10)
          move: # (24) = var t (12)
          move: # (25) = var N (9)
        end call: start 20, params 6, ret values 0
      end scope ret values 0

      var i (14) = var i (14) [operator +] const number 1 (-4)
    end loop ret values 0
  end scope ret values 0


[35] var vBv, vv = 0, 0

  move: # (20) = const number 0 (-6)
  move: var vv (16) = const number 0 (-6)
  move: var vBv (15) = # (20)


[36] for(var i=1; i<=N; i++){

  begin scope
    begin locals 1
      17 i
    end locals
    move: var i (17) = const number 1 (-4)

    begin loop
      begin if
        begin bool exp
          move: # (20) = var i (17)
          move: # (21) = var N (9)
          # (20) = # (20) [logic <=] # (21)
          # (20) = [logic not] # (20)
        end bool exp
        begin then
          break
        end then
      end if ret values 0


[37] var ui, vi = u[i], v[i]

      begin scope
        begin locals 2
          18 ui
          19 vi
        end locals
        get property: # (20) = var u (10) [var i (17)]
        get property: var vi (19) = var v (11) [var i (17)]
        move: var ui (18) = # (20)


[38] vBv = vBv + ui*vi

        # (21) = var ui (18) [operator *] var vi (19)
        var vBv (15) = var vBv (15) [operator +] # (21)


[39] vv = vv + vi*vi

        # (21) = var vi (19) [operator *] var vi (19)
        var vv (16) = var vv (16) [operator +] # (21)
      end scope ret values 0


[36] for(var i=1; i<=N; i++){

      var i (17) = var i (17) [operator +] const number 1 (-4)
    end loop ret values 0
  end scope ret values 0


[41] printf("%0.9f\n", math.sqrt(vBv / vv))

  begin call method
    move: # (20) = var _E (2)
    move: # (21) = const string "printf" (-12)
    move: # (22) = const string "%0.9f
" (-13)
    begin call method
      get property: # (23) = var _E (2) [const string "math" (-14)]
      move: # (24) = const string "sqrt" (-15)
      # (25) = var vBv (15) [operator /] var vv (16)
    end call method: start 23, params 3, ret values 1
  end call method: start 20, params 4, ret values 0


[42] printf("time: %.3f\n", getTimeSec() - start_time)

  begin call method
    move: # (20) = var _E (2)
    move: # (21) = const string "printf" (-12)
    move: # (22) = const string "time: %.3f
" (-16)
    begin call method
      move: # (23) = var _E (2)
      move: # (24) = const string "getTimeSec" (-9)
    end call method: start 23, params 2, ret values 1
    # (23) = # (23) [operator -] var start_time (4)
  end call method: start 20, params 4, ret values 0

  return: var _E (2), count 1
end function: {main} (0), index 0
