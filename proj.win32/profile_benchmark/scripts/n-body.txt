
[FILE] c:\Sources\OS\proj.win32\profile_benchmark\scripts\n-body.os
[1] var start_time = os.clock()

begin function
  begin locals 15, stack 22
    0 _F (param)
    1 this (param)
    2 _E
    3 _G
    4 start_time
    5 PI
    6 SOLAR_MASS
    7 DAYS_PER_YEAR
    8 bodies
    9 advance
    10 energy
    11 offsetMomentum
    12 N
    13 nbody
  end locals
  begin call method
    get property: # (15) = var _E (2) [const string "os" (-40)]
    move: # (16) = const string "clock" (-41)
  end call method: start 15, params 2, ret values 1
  move: var start_time (4) = # (15)


[3] var PI = 3.141592653589793

  move: var PI (5) = const number 3.14159 (-4)


[4] var SOLAR_MASS = 4 * PI * PI

  # (15) = const number 4 (-5) [operator *] var PI (5)
  var SOLAR_MASS (6) = # (15) [operator *] var PI (5)


[5] var DAYS_PER_YEAR = 365.24

  move: var DAYS_PER_YEAR (7) = const number 365.24 (-6)


[6] var bodies = {

  new object 5: # (15)

[8] 1: { // Sun

  new object 7: # (17)

[9] x = 0,

  set property: # (17) [const string "x" (-42)] = const number 0 (-8)

[10] y = 0,

  set property: # (17) [const string "y" (-43)] = const number 0 (-8)

[11] z = 0,

  set property: # (17) [const string "z" (-44)] = const number 0 (-8)

[12] vx = 0,

  set property: # (17) [const string "vx" (-45)] = const number 0 (-8)

[13] vy = 0,

  set property: # (17) [const string "vy" (-46)] = const number 0 (-8)

[14] vz = 0,

  set property: # (17) [const string "vz" (-47)] = const number 0 (-8)

[15] mass = SOLAR_MASS

  set property: # (17) [const string "mass" (-48)] = var SOLAR_MASS (6)
  set property: # (15) [const number 1 (-7)] = # (17)

[17] { // Jupiter

  begin call method
    move: # (16) = # (15)
    move: # (17) = const string "push" (-49)
    new object 7: # (18)

[18] x = 4.84143144246472090e+00,

    set property: # (18) [const string "x" (-42)] = const number 4.84143 (-9)

[19] y = -1.16032004402742839e+00,

    # (20) = [neg] const number 1.16032 (-10)
    set property: # (18) [const string "y" (-43)] = # (20)

[20] z = -1.03622044471123109e-01,

    # (20) = [neg] const number 0.103622 (-11)
    set property: # (18) [const string "z" (-44)] = # (20)

[21] vx = 1.66007664274403694e-03 * DAYS_PER_YEAR,

    # (20) = const number 0.00166008 (-12) [operator *] var DAYS_PER_YEAR (7)
    set property: # (18) [const string "vx" (-45)] = # (20)

[22] vy = 7.69901118419740425e-03 * DAYS_PER_YEAR,

    # (20) = const number 0.00769901 (-13) [operator *] var DAYS_PER_YEAR (7)
    set property: # (18) [const string "vy" (-46)] = # (20)

[23] vz = -6.90460016972063023e-05 * DAYS_PER_YEAR,

    # (20) = [neg] const number 6.9046e-005 (-14)
    # (20) = # (20) [operator *] var DAYS_PER_YEAR (7)
    set property: # (18) [const string "vz" (-47)] = # (20)

[24] mass = 9.54791938424326609e-04 * SOLAR_MASS

    # (20) = const number 0.000954792 (-15) [operator *] var SOLAR_MASS (6)
    set property: # (18) [const string "mass" (-48)] = # (20)
  end call method: start 16, params 3, ret values 0

[26] { // Saturn

  begin call method
    move: # (16) = # (15)
    move: # (17) = const string "push" (-49)
    new object 7: # (18)

[27] x = 8.34336671824457987e+00,

    set property: # (18) [const string "x" (-42)] = const number 8.34337 (-16)

[28] y = 4.12479856412430479e+00,

    set property: # (18) [const string "y" (-43)] = const number 4.1248 (-17)

[29] z = -4.03523417114321381e-01,

    # (20) = [neg] const number 0.403523 (-18)
    set property: # (18) [const string "z" (-44)] = # (20)

[30] vx = -2.76742510726862411e-03 * DAYS_PER_YEAR,

    # (20) = [neg] const number 0.00276743 (-19)
    # (20) = # (20) [operator *] var DAYS_PER_YEAR (7)
    set property: # (18) [const string "vx" (-45)] = # (20)

[31] vy = 4.99852801234917238e-03 * DAYS_PER_YEAR,

    # (20) = const number 0.00499853 (-20) [operator *] var DAYS_PER_YEAR (7)
    set property: # (18) [const string "vy" (-46)] = # (20)

[32] vz = 2.30417297573763929e-05 * DAYS_PER_YEAR,

    # (20) = const number 2.30417e-005 (-21) [operator *] var DAYS_PER_YEAR (7)
    set property: # (18) [const string "vz" (-47)] = # (20)

[33] mass = 2.85885980666130812e-04 * SOLAR_MASS

    # (20) = const number 0.000285886 (-22) [operator *] var SOLAR_MASS (6)
    set property: # (18) [const string "mass" (-48)] = # (20)
  end call method: start 16, params 3, ret values 0

[35] { // Uranus

  begin call method
    move: # (16) = # (15)
    move: # (17) = const string "push" (-49)
    new object 7: # (18)

[36] x = 1.28943695621391310e+01,

    set property: # (18) [const string "x" (-42)] = const number 12.8944 (-23)

[37] y = -1.51111514016986312e+01,

    # (20) = [neg] const number 15.1112 (-24)
    set property: # (18) [const string "y" (-43)] = # (20)

[38] z = -2.23307578892655734e-01,

    # (20) = [neg] const number 0.223308 (-25)
    set property: # (18) [const string "z" (-44)] = # (20)

[39] vx = 2.96460137564761618e-03 * DAYS_PER_YEAR,

    # (20) = const number 0.0029646 (-26) [operator *] var DAYS_PER_YEAR (7)
    set property: # (18) [const string "vx" (-45)] = # (20)

[40] vy = 2.37847173959480950e-03 * DAYS_PER_YEAR,

    # (20) = const number 0.00237847 (-27) [operator *] var DAYS_PER_YEAR (7)
    set property: # (18) [const string "vy" (-46)] = # (20)

[41] vz = -2.96589568540237556e-05 * DAYS_PER_YEAR,

    # (20) = [neg] const number 2.9659e-005 (-28)
    # (20) = # (20) [operator *] var DAYS_PER_YEAR (7)
    set property: # (18) [const string "vz" (-47)] = # (20)

[42] mass = 4.36624404335156298e-05 * SOLAR_MASS

    # (20) = const number 4.36624e-005 (-29) [operator *] var SOLAR_MASS (6)
    set property: # (18) [const string "mass" (-48)] = # (20)
  end call method: start 16, params 3, ret values 0

[44] { // Neptune

  begin call method
    move: # (16) = # (15)
    move: # (17) = const string "push" (-49)
    new object 7: # (18)

[45] x = 1.53796971148509165e+01,

    set property: # (18) [const string "x" (-42)] = const number 15.3797 (-30)

[46] y = -2.59193146099879641e+01,

    # (20) = [neg] const number 25.9193 (-31)
    set property: # (18) [const string "y" (-43)] = # (20)

[47] z = 1.79258772950371181e-01,

    set property: # (18) [const string "z" (-44)] = const number 0.179259 (-32)

[48] vx = 2.68067772490389322e-03 * DAYS_PER_YEAR,

    # (20) = const number 0.00268068 (-33) [operator *] var DAYS_PER_YEAR (7)
    set property: # (18) [const string "vx" (-45)] = # (20)

[49] vy = 1.62824170038242295e-03 * DAYS_PER_YEAR,

    # (20) = const number 0.00162824 (-34) [operator *] var DAYS_PER_YEAR (7)
    set property: # (18) [const string "vy" (-46)] = # (20)

[50] vz = -9.51592254519715870e-05 * DAYS_PER_YEAR,

    # (20) = [neg] const number 9.51592e-005 (-35)
    # (20) = # (20) [operator *] var DAYS_PER_YEAR (7)
    set property: # (18) [const string "vz" (-47)] = # (20)

[51] mass = 5.15138902046611451e-05 * SOLAR_MASS

    # (20) = const number 5.15139e-005 (-36) [operator *] var SOLAR_MASS (6)
    set property: # (18) [const string "mass" (-48)] = # (20)
  end call method: start 16, params 3, ret values 0
  move: var bodies (8) = # (15)


[55] var function advance(bodies, nbody, dt){

  begin function
    begin locals 23, stack 28
      0 _F (param)
      1 this (param)
      2 bodies (param)
      3 nbody (param)
      4 dt (param)
      5 _E
      6 _G
    end locals

[56] for(var i=1; i<=nbody; i++){

    begin scope
      begin locals 1
        7 i
      end locals
      move: var i (7) = const number 1 (-7)

      begin loop
        begin if
          begin bool exp
            move: # (23) = var i (7)
            move: # (24) = param nbody (3)
            # (23) = # (23) [logic <=] # (24)
            # (23) = [logic not] # (23)
          end bool exp
          begin then
            break
          end then
        end if ret values 0


[57] var bi = bodies[i]

        begin scope
          begin locals 8
            8 bi
            9 bix
            10 biy
            11 biz
            12 bimass
            13 bivx
            14 bivy
            15 bivz
          end locals
          get property: var bi (8) = param bodies (2) [var i (7)]


[58] var bix, biy, biz, bimass = bi.x, bi.y, bi.z, bi.mass

          get property: # (23) = var bi (8) [const string "x" (-42)]
          get property: # (24) = var bi (8) [const string "y" (-43)]
          get property: # (25) = var bi (8) [const string "z" (-44)]
          get property: var bimass (12) = var bi (8) [const string "mass" (-48)]
          move: var biz (11) = # (25)
          move: var biy (10) = # (24)
          move: var bix (9) = # (23)


[59] var bivx, bivy, bivz = bi.vx, bi.vy, bi.vz

          get property: # (23) = var bi (8) [const string "vx" (-45)]
          get property: # (24) = var bi (8) [const string "vy" (-46)]
          get property: var bivz (15) = var bi (8) [const string "vz" (-47)]
          move: var bivy (14) = # (24)
          move: var bivx (13) = # (23)


[60] for(var j=i+1; j<=nbody; j++){

          begin scope
            begin locals 1
              16 j
            end locals
            var j (16) = var i (7) [operator +] const number 1 (-7)

            begin loop
              begin if
                begin bool exp
                  move: # (23) = var j (16)
                  move: # (24) = param nbody (3)
                  # (23) = # (23) [logic <=] # (24)
                  # (23) = [logic not] # (23)
                end bool exp
                begin then
                  break
                end then
              end if ret values 0


[61] var bj = bodies[j]

              begin scope
                begin locals 6
                  17 bj
                  18 dx
                  19 dy
                  20 dz
                  21 mag
                  22 bm
                end locals
                get property: var bj (17) = param bodies (2) [var j (16)]


[62] var dx, dy, dz = bix-bj.x, biy-bj.y, biz-bj.z

                get property: # (24) = var bj (17) [const string "x" (-42)]
                # (23) = var bix (9) [operator -] # (24)
                get property: # (25) = var bj (17) [const string "y" (-43)]
                # (24) = var biy (10) [operator -] # (25)
                get property: # (26) = var bj (17) [const string "z" (-44)]
                var dz (20) = var biz (11) [operator -] # (26)
                move: var dy (19) = # (24)
                move: var dx (18) = # (23)


[63] var mag = (dx*dx + dy*dy + dz*dz) ** 0.5

                # (23) = var dx (18) [operator *] var dx (18)
                # (24) = var dy (19) [operator *] var dy (19)
                # (23) = # (23) [operator +] # (24)
                # (24) = var dz (20) [operator *] var dz (20)
                # (23) = # (23) [operator +] # (24)
                var mag (21) = # (23) [operator **] const number 0.5 (-37)


[64] mag = dt / (mag * mag * mag)

                # (24) = var mag (21) [operator *] var mag (21)
                # (24) = # (24) [operator *] var mag (21)
                var mag (21) = param dt (4) [operator /] # (24)


[65] var bm = bj.mass*mag

                get property: # (23) = var bj (17) [const string "mass" (-48)]
                var bm (22) = # (23) [operator *] var mag (21)


[66] bivx = bivx - (dx * bm)

                # (24) = var dx (18) [operator *] var bm (22)
                var bivx (13) = var bivx (13) [operator -] # (24)


[67] bivy = bivy - (dy * bm)

                # (24) = var dy (19) [operator *] var bm (22)
                var bivy (14) = var bivy (14) [operator -] # (24)


[68] bivz = bivz - (dz * bm)

                # (24) = var dz (20) [operator *] var bm (22)
                var bivz (15) = var bivz (15) [operator -] # (24)


[69] bm = bimass*mag

                var bm (22) = var bimass (12) [operator *] var mag (21)


[70] bj.vx = bj.vx + (dx * bm)

                get property: # (23) = var bj (17) [const string "vx" (-45)]
                # (24) = var dx (18) [operator *] var bm (22)
                # (23) = # (23) [operator +] # (24)
                set property: var bj (17) [const string "vx" (-45)] = # (23)


[71] bj.vy = bj.vy + (dy * bm)

                get property: # (23) = var bj (17) [const string "vy" (-46)]
                # (24) = var dy (19) [operator *] var bm (22)
                # (23) = # (23) [operator +] # (24)
                set property: var bj (17) [const string "vy" (-46)] = # (23)


[72] bj.vz = bj.vz + (dz * bm)

                get property: # (23) = var bj (17) [const string "vz" (-47)]
                # (24) = var dz (20) [operator *] var bm (22)
                # (23) = # (23) [operator +] # (24)
                set property: var bj (17) [const string "vz" (-47)] = # (23)
              end scope ret values 0


[60] for(var j=i+1; j<=nbody; j++){

              var j (16) = var j (16) [operator +] const number 1 (-7)
            end loop ret values 0
          end scope ret values 0


[74] bi.vx = bivx

          set property: var bi (8) [const string "vx" (-45)] = var bivx (13)


[75] bi.vy = bivy

          set property: var bi (8) [const string "vy" (-46)] = var bivy (14)


[76] bi.vz = bivz

          set property: var bi (8) [const string "vz" (-47)] = var bivz (15)


[77] bi.x = bix + dt * bivx

          # (24) = param dt (4) [operator *] var bivx (13)
          # (23) = var bix (9) [operator +] # (24)
          set property: var bi (8) [const string "x" (-42)] = # (23)


[78] bi.y = biy + dt * bivy

          # (24) = param dt (4) [operator *] var bivy (14)
          # (23) = var biy (10) [operator +] # (24)
          set property: var bi (8) [const string "y" (-43)] = # (23)


[79] bi.z = biz + dt * bivz

          # (24) = param dt (4) [operator *] var bivz (15)
          # (23) = var biz (11) [operator +] # (24)
          set property: var bi (8) [const string "z" (-44)] = # (23)
        end scope ret values 0


[56] for(var i=1; i<=nbody; i++){

        var i (7) = var i (7) [operator +] const number 1 (-7)
      end loop ret values 0
    end scope ret values 0
  end function: var advance (9), index 1


[83] var function energy(bodies, nbody){

  begin function
    begin locals 19, stack 24
      0 _F (param)
      1 this (param)
      2 bodies (param)
      3 nbody (param)
      4 _E
      5 _G
      6 e
    end locals

[84] var e = 0

    move: var e (6) = const number 0 (-8)


[85] for(var i=1; i<=nbody; i++){

    begin scope
      begin locals 1
        7 i
      end locals
      move: var i (7) = const number 1 (-7)

      begin loop
        begin if
          begin bool exp
            move: # (19) = var i (7)
            move: # (20) = param nbody (3)
            # (19) = # (19) [logic <=] # (20)
            # (19) = [logic not] # (19)
          end bool exp
          begin then
            break
          end then
        end if ret values 0


[86] var bi = bodies[i]

        begin scope
          begin locals 5
            8 bi
            9 vx
            10 vy
            11 vz
            12 bim
          end locals
          get property: var bi (8) = param bodies (2) [var i (7)]


[87] var vx, vy, vz, bim = bi.vx, bi.vy, bi.vz, bi.mass

          get property: # (19) = var bi (8) [const string "vx" (-45)]
          get property: # (20) = var bi (8) [const string "vy" (-46)]
          get property: # (21) = var bi (8) [const string "vz" (-47)]
          get property: var bim (12) = var bi (8) [const string "mass" (-48)]
          move: var vz (11) = # (21)
          move: var vy (10) = # (20)
          move: var vx (9) = # (19)


[88] e = e + (0.5 * bim * (vx*vx + vy*vy + vz*vz))

          # (20) = const number 0.5 (-37) [operator *] var bim (12)
          # (21) = var vx (9) [operator *] var vx (9)
          # (22) = var vy (10) [operator *] var vy (10)
          # (21) = # (21) [operator +] # (22)
          # (22) = var vz (11) [operator *] var vz (11)
          # (21) = # (21) [operator +] # (22)
          # (20) = # (20) [operator *] # (21)
          var e (6) = var e (6) [operator +] # (20)


[89] for(var j=i+1; j<=nbody; j++){

          begin scope
            begin locals 1
              13 j
            end locals
            var j (13) = var i (7) [operator +] const number 1 (-7)

            begin loop
              begin if
                begin bool exp
                  move: # (19) = var j (13)
                  move: # (20) = param nbody (3)
                  # (19) = # (19) [logic <=] # (20)
                  # (19) = [logic not] # (19)
                end bool exp
                begin then
                  break
                end then
              end if ret values 0


[90] var bj = bodies[j]

              begin scope
                begin locals 5
                  14 bj
                  15 dx
                  16 dy
                  17 dz
                  18 distance
                end locals
                get property: var bj (14) = param bodies (2) [var j (13)]


[91] var dx, dy, dz = bi.x-bj.x, bi.y-bj.y, bi.z-bj.z

                get property: # (19) = var bi (8) [const string "x" (-42)]
                get property: # (20) = var bj (14) [const string "x" (-42)]
                # (19) = # (19) [operator -] # (20)
                get property: # (20) = var bi (8) [const string "y" (-43)]
                get property: # (21) = var bj (14) [const string "y" (-43)]
                # (20) = # (20) [operator -] # (21)
                get property: # (21) = var bi (8) [const string "z" (-44)]
                get property: # (22) = var bj (14) [const string "z" (-44)]
                var dz (17) = # (21) [operator -] # (22)
                move: var dy (16) = # (20)
                move: var dx (15) = # (19)


[92] var distance = (dx*dx + dy*dy + dz*dz) ** 0.5

                # (19) = var dx (15) [operator *] var dx (15)
                # (20) = var dy (16) [operator *] var dy (16)
                # (19) = # (19) [operator +] # (20)
                # (20) = var dz (17) [operator *] var dz (17)
                # (19) = # (19) [operator +] # (20)
                var distance (18) = # (19) [operator **] const number 0.5 (-37)


[93] e = e - ((bim * bj.mass) / distance)

                get property: # (21) = var bj (14) [const string "mass" (-48)]
                # (20) = var bim (12) [operator *] # (21)
                # (20) = # (20) [operator /] var distance (18)
                var e (6) = var e (6) [operator -] # (20)
              end scope ret values 0


[89] for(var j=i+1; j<=nbody; j++){

              var j (13) = var j (13) [operator +] const number 1 (-7)
            end loop ret values 0
          end scope ret values 0
        end scope ret values 0


[85] for(var i=1; i<=nbody; i++){

        var i (7) = var i (7) [operator +] const number 1 (-7)
      end loop ret values 0
    end scope ret values 0


[96] return e

    return: var e (6), count 1
  end function: var energy (10), index 2


[99] var function offsetMomentum(b, nbody){

  begin function
    begin locals 12, stack 15
      0 _F (param)
      1 this (param)
      2 b (param)
      3 nbody (param)
      4 _E
      5 _G
      6 px
      7 py
      8 pz
    end locals

[100] var px, py, pz = 0, 0, 0

    move: # (12) = const number 0 (-8)
    move: # (13) = const number 0 (-8)
    move: var pz (8) = const number 0 (-8)
    move: var py (7) = # (13)
    move: var px (6) = # (12)

[101] for(var i=1; i<=nbody; i++){

    begin scope
      begin locals 1
        9 i
      end locals
      move: var i (9) = const number 1 (-7)

      begin loop
        begin if
          begin bool exp
            move: # (12) = var i (9)
            move: # (13) = param nbody (3)
            # (12) = # (12) [logic <=] # (13)
            # (12) = [logic not] # (12)
          end bool exp
          begin then
            break
          end then
        end if ret values 0


[102] var bi = b[i]

        begin scope
          begin locals 2
            10 bi
            11 bim
          end locals
          get property: var bi (10) = param b (2) [var i (9)]


[103] var bim = bi.mass

          get property: var bim (11) = var bi (10) [const string "mass" (-48)]


[104] px = px + (bi.vx * bim)

          get property: # (13) = var bi (10) [const string "vx" (-45)]
          # (13) = # (13) [operator *] var bim (11)
          var px (6) = var px (6) [operator +] # (13)


[105] py = py + (bi.vy * bim)

          get property: # (13) = var bi (10) [const string "vy" (-46)]
          # (13) = # (13) [operator *] var bim (11)
          var py (7) = var py (7) [operator +] # (13)


[106] pz = pz + (bi.vz * bim)

          get property: # (13) = var bi (10) [const string "vz" (-47)]
          # (13) = # (13) [operator *] var bim (11)
          var pz (8) = var pz (8) [operator +] # (13)
        end scope ret values 0


[101] for(var i=1; i<=nbody; i++){

        var i (9) = var i (9) [operator +] const number 1 (-7)
      end loop ret values 0
    end scope ret values 0

[108] b[1].vx = -px / SOLAR_MASS

    # (12) = [neg] var px (6)
    get upvalue: # (13) = var SOLAR_MASS (6 1)
    # (12) = # (12) [operator /] # (13)
    get property: # (13) = param b (2) [const number 1 (-7)]
    set property: # (13) [const string "vx" (-45)] = # (12)

[109] b[1].vy = -py / SOLAR_MASS

    # (12) = [neg] var py (7)
    get upvalue: # (13) = var SOLAR_MASS (6 1)
    # (12) = # (12) [operator /] # (13)
    get property: # (13) = param b (2) [const number 1 (-7)]
    set property: # (13) [const string "vy" (-46)] = # (12)

[110] b[1].vz = -pz / SOLAR_MASS

    # (12) = [neg] var pz (8)
    get upvalue: # (13) = var SOLAR_MASS (6 1)
    # (12) = # (12) [operator /] # (13)
    get property: # (13) = param b (2) [const number 1 (-7)]
    set property: # (13) [const string "vz" (-47)] = # (12)
  end function: var offsetMomentum (11), index 3


[113] var N = numberOf(arg && arg[1]) || 1000

  begin call method
    move: # (15) = var _E (2)
    move: # (16) = const string "numberOf" (-50)
    get property: # (17) = var _E (2) [const string "arg" (-51)]
    logic &&: # (17)
      get property: # (17) = var _E (2) [const string "arg" (-51)]
      get property: # (17) = # (17) [const number 1 (-7)]
  end call method: start 15, params 3, ret values 1
  logic ||: # (15)
    move: # (15) = const number 1000 (-38)
  move: var N (12) = # (15)


[114] var nbody = #bodies

  begin call method
    move: # (15) = var bodies (8)
    move: # (16) = const string "__len" (-52)
  end call method: start 15, params 2, ret values 1
  move: var nbody (13) = # (15)


[116] offsetMomentum(bodies, nbody)

  begin call
    move: # (15) = var offsetMomentum (11)
    move: # (16) = const null (-1)
    move: # (17) = var bodies (8)
    move: # (18) = var nbody (13)
  end call: start 15, params 4, ret values 0


[117] printf("%0.9f\n", energy(bodies, nbody))

  begin call method
    move: # (15) = var _E (2)
    move: # (16) = const string "printf" (-53)
    move: # (17) = const string "%0.9f
" (-54)
    begin call
      move: # (18) = var energy (10)
      move: # (19) = const null (-1)
      move: # (20) = var bodies (8)
      move: # (21) = var nbody (13)
    end call: start 18, params 4, ret values 1
  end call method: start 15, params 4, ret values 0


[119] for(var i=1; i<=N; i++){ advance(bodies, nbody, 0.01) }

  begin scope
    begin locals 1
      14 i
    end locals
    move: var i (14) = const number 1 (-7)

    begin loop
      begin if
        begin bool exp
          move: # (15) = var i (14)
          move: # (16) = var N (12)
          # (15) = # (15) [logic <=] # (16)
          # (15) = [logic not] # (15)
        end bool exp
        begin then
          break
        end then
      end if ret values 0

      begin scope
        begin call
          move: # (15) = var advance (9)
          move: # (16) = const null (-1)
          move: # (17) = var bodies (8)
          move: # (18) = var nbody (13)
          move: # (19) = const number 0.01 (-39)
        end call: start 15, params 5, ret values 0
      end scope ret values 0

      var i (14) = var i (14) [operator +] const number 1 (-7)
    end loop ret values 0
  end scope ret values 0


[120] printf("%0.9f\n",energy(bodies, nbody))

  begin call method
    move: # (15) = var _E (2)
    move: # (16) = const string "printf" (-53)
    move: # (17) = const string "%0.9f
" (-54)
    begin call
      move: # (18) = var energy (10)
      move: # (19) = const null (-1)
      move: # (20) = var bodies (8)
      move: # (21) = var nbody (13)
    end call: start 18, params 4, ret values 1
  end call method: start 15, params 4, ret values 0


[122] printf("time: %.3f\n", getTimeSec() - start_time)

  begin call method
    move: # (15) = var _E (2)
    move: # (16) = const string "printf" (-53)
    move: # (17) = const string "time: %.3f
" (-55)
    begin call method
      move: # (18) = var _E (2)
      move: # (19) = const string "getTimeSec" (-56)
    end call method: start 18, params 2, ret values 1
    # (18) = # (18) [operator -] var start_time (4)
  end call method: start 15, params 4, ret values 0

  return: var _E (2), count 1
end function: <<->> (0), index 0
